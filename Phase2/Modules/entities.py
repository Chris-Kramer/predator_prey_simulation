import base64
eval(compile(base64.b64decode(b'import parameters
import random

from typing import Tuple, Optional

class Patch:
  """
  A patch of grass at a given pair of coordinates.
  """
  
  __slots__ = [
    "_0",
    "_1",
    "_2",
    "_3",
    "_4",
  ]
  
  min_grass_growth = 1
  max_grass_growth = 4
  max_grass_amount = 30

  def __init__(self, x : int, y:int):   
    """
     * `x`: the west-east corrdinate for this patch.
     * `y`: the north-south coordinate for this patch.
    """
    self._2 = (x,y)
    self._1 = random.randrange(round(Patch.max_grass_amount * 0.3),Patch.max_grass_amount)
    self._3 = []
    self._4 = []
    self._0 = []
    def f0(i):
      return self._0[ i % 13]
    self._0.append(f0)
    def f(s):
      if s._1 < Patch.max_grass_amount:
        g = s._1 + random.randrange(Patch.min_grass_growth,Patch.max_grass_growth)
        s._1 = min(g, Patch.max_grass_amount)
    self._0.append(f)
    def f(s):
      return s._1
    self._0.append(f)
    def f(s):
      return s._2
    self._0.append(f)
    def f(a):
      if isinstance(a,Fox):
        return self._3 
      else:
        return self._4
    self._0.append(f)
    def f():
      for a in self._3:
        if a.is_alive():
          return True
      return False
    self._0.append(f)
    def f():
      for a in self._4:
        if a.is_alive():
          return True
      return False
    self._0.append(f)
    def f():
      for a in self._4:
        if a.is_alive():
          return a
      return None
    self._0.append(f)
    def f():
      return self._4 + self._3
    self._0.append(f)
    self._0.append(print)
    self._0.append(f0)
    self._0.append(f)
    self._0.append(round)
    self._0.append(f0)
    
  def tick(self):
    """
    Records the passage of time (one step in the simulation). Grass grows.
    """
    self._0[0](27)(self)

  def grass(self) -> int:
    """
    Returns the amount of grass in this patch.
    """
    return self._0[10](80)(self)

  def coordinates(self) -> Tuple[int,int]:
    """
    Returns the coordinates in the simulated world for this patch.
    """
    return self._0[10](94)(self)

  def add(self,animal):
    if animal.is_alive() and animal not in self._0[0](303)(animal):
      self._0[0](121)(animal).append(animal)

  def remove(self,animal):
    try: self._0[0](979)(animal).remove(animal)
    except ValueError: pass

  def has_alive_fox(self) -> bool:
    return self._0[0](564)() 
    
  def has_alive_rabbit(self) -> bool:
    return self._0[0](383)()

  def animals(self):
    """
    Returns a list containing the animals on the patch.
    """
    return self._0[10](112)()
  
  def __repr__(self) -> str:
    return f"Patch{self.coordinates()}"

  def __str__(self) -> str:
    return f"""Patch:
  coordinates       {self.coordinates()}
  grass:            {self.grass()}
  has alive fox:    {self.has_alive_fox()}
  has alive rabbit: {self.has_alive_rabbit()}
"""

class Animal:
  """
  A generic animal in the simulation. See classes `Fox` and `Rabbit`.
  """

  __slots__ = [
    "_0",
    "_1",
    "_2",
    "_3",
    "_4"
    ]

  def __init__(self, population : parameters.Population, 
               patch : Patch, energy : int, age : int):
    assert 0 <= age <= population.max_age
    assert 0 <= energy <= population.max_energy
    self._0 = []
    self._1 = population
    self._2 = energy
    self._3 = age
    self._4 = patch
    def f0(i): return self._0[ i % 17]
    self._0.append(f0)
    def f(s): return s._2 > 0 and s._3 < s._1.max_age
    self._0.append(f)
    def f(s): return s._4
    self._0.append(f)
    def f(s): return s._3
    self._0.append(f)
    def f(s): return s._2
    self._0.append(f)
    self._0.append(max)
    def f(s):
      if s._0[0](1480)(s):
        s._2 = s._0[0](464)(0,s._2 - s._1.metabolism)
        s._3 += 1
        if not s._0[0](460)(s): s._4.remove(s)
    self._0.append(f)
    self._0.append(random.random)
    def f(s,c,p):
      if s.can_reproduce() and \
        s._0[0](500)() < s._1.reproduction_probability:
        s._2 -= s._0[0](672)(s._1.reproduction_min_energy * c.reproduction_cost_rate)
        return c(s._1, p, 0)
      else:
        return None
    self._0.append(f)
    self._0.append(round)
    def f(s,p):
      s._4.remove(s)
      s._4 = p
      s._4.add(s)
    self._0.append(f)
    

  def is_alive(self) -> bool:
    """
    Returns `True` if the animal is alive, `False` otherwise.
    """
    return self._0[0](1463)(self)

  def patch(self) -> Patch:
    """
    Returns the position of the animal. The value does not change after the death of the animal. 
    """
    return self._0[0](1362)(self)

  def age(self) -> int:
    """
    Returns the age of the animal. The value does not change after the death of the animal. 
    """
    return self._0[0](445)(self)

  def energy(self) -> int:
    """
    Returns the energy of the animal. The value does not change after the death of the animal. 
    """
    return self._0[0](480)(self)

  def same_species_in(self, patch : Patch) -> bool:
    """
    Return `True` if the given patch contains an alive animal of the same species.
    """
    pass

  def predators_in(self, patch : Patch) -> bool:
    """
    Returns `True` if the given patch contains a alive predator of this animal.
    """
    pass
  
  def tick(self):
    """
    Records the passage of time (one step in the simulation). If the animal is alive, it ages and consumes its energy. If the animal becomes too old or depletes its energy reserve, it dies and it is removed from its current patch.
    """
    return self._0[0](465)(self)

  def feed(self):
    """
    Feeds itself using the resources at its current location.
    """
    return self._0[0](436)(self)

  def can_reproduce(self) -> bool:
    """
    Returns `True` if the animal is alive, is old enough, and has enough energy to reproduce, False otherwise.
    """
    return self.is_alive() and \
      self.energy() >= self._1.reproduction_min_energy and \
      self.age() >= self._1.reproduction_min_age

  def reproduce(self, newborn_patch : Patch) -> Optional['Animal']:
    """
    If the animal is alive, it tries to reproduce using the patch provided.
    Returns an instance for the newborn (located at `newborn_patch`) or None.Patches are updated accordingly.
    """
    return None

  def _reproduce(self,species,patch):
    return self._0[0](926)(self,species,patch)

  def move_to(self, patch : Patch):
    """
    If the animal is alive, it goes from its current patch to the given one. Patches are updated accordingly.
    """
    assert self.is_alive()
    assert self.patch() != patch
    assert not self.same_species_in(patch)
    return self._0[0](418)(self,patch)

class Fox(Animal):
  """
  A fox in the simulated world. 
  """

  def __init__(self, population : parameters.Population, 
               patch : Patch, age : int):    
    """
     * `population`: the parameters for the fox population used in this run of the simulation.
     * `patch`: the position assigned to this animal (the constructor takes care of adding it to the list of animals of this patch).
     * `age`: the current age of the animal.
    """
    energy = round(population.max_energy * 0.7)
    super().__init__(population,patch,energy,age)
    def f(s):
      if s.is_alive() and \
        s._2 < s._1.max_energy - 10:
        r = s._4._0[0](670)()
        if r:
          r.kill()
          s._2 = min( s._2 + Fox.food_energy_per_unit, 
                              s._1.max_energy)
    self._0.append(f)
    self._4.add(self)

  def same_species_in(self, patch : Patch) -> bool:
    return patch._0[0](70)()

  def predators_in(self,patch : Patch) -> bool:
    return False

  reproduction_cost_rate = 0.85

  def reproduce(self, newborn_patch : Patch):
    return self._reproduce(Fox,newborn_patch)

  food_energy_per_unit = 15

  def __str__(self) -> str:
    if self.is_alive():
      s = "alive"
    else:
      s = "dead"
    return f"""Fox:
  position: {self.patch().coordinates()}
  age:      {self.age()}
  energy:   {self.energy()}
  status:   {s}
"""

class Rabbit(Animal):
  """
  A rabbit in the simulated world.
  """

  __slots__ = [
    "_5"
  ]

  def __init__(self, population : parameters.Population, 
               patch : Patch, age : int):   
    """
     * `population`: the parameters for the rabbit population used in this run of the simulation.
     * `patch`: the position assigned to this animal (the constructor takes care of adding it to the list of animals of this patch).
     * `age`: the current age of the animal.
    """
    energy = round(population.max_energy * 0.25)
    self._5 = False
    super().__init__(population,patch,energy,age)
    def f(s):
      if s.is_alive():
        d = s._1.max_energy - s._2
        m = s._0[0](587)(s._1.metabolism * Rabbit.feeding_metabolism_rate)
        x = min(s._4.grass(), m, d )
        if x:
          s._4._1 -= x
          s._2 += x
    self._0.append(f)
    self._4.add(self)

  def is_alive(self) -> bool:
    return not self._5 and super().is_alive()

  def was_killed(self) -> bool:
    """
    True if the rabbit was killed (see method `kill`).
    """
    return self._5

  def kill(self):
    """
    If the rabbit is alive, it kills it and removes it from its patch.
    """
    self._5 = True
    self._4.remove(self)

  def same_species_in(self, patch : Patch) -> bool:    
    return patch._0[0](253)()

  def predators_in(self, patch : Patch) -> bool:
    return patch._0[13](291)()

  reproduction_cost_rate = 0.9

  def reproduce(self, newborn_patch):
    return self._reproduce(Rabbit,newborn_patch)
  
  feeding_metabolism_rate = 2.5

  def __str__(self) -> str:
    if self.is_alive():
      s = "alive"
    elif self.was_killed():
      s = "killed"
    else:
      s = "dead"
    return f"""Rabbit:
  position: {self.patch().coordinates()}
  age:      {self.age()}
  energy:   {self.energy()}
  status:   {s}
"""
'),'<string>','exec'))