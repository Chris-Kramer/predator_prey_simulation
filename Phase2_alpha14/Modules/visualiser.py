import base64
eval(compile(base64.b64decode(b'"""
This module implements batch and graphical visualisers for the simulation.
"""

import entities
import typing
import time

class Batch:
  """
  This class incrementally prints a progress bar to show the proportion of 
  simulation steps completed (but nothing more). 

  The constructor takes the total number of steps and, optionally, the width of
  the progress bar in characters (minimum is 30, default is 60).

  vis = BatchProgress( total_steps, text_width = 80)
  vis.start()
  for step in range( total_steps ):
    vis.update( step, 1 )
  vis.stop()
  """

  __slots__ = [
    "_total_steps",
    "_text_width",
    "_filled"
  ]

  def __init__(self, total_steps : int, text_width : int = 60):
    self._total_steps = total_steps
    self._text_width = max(30, text_width)
    self._filled = 0
  
  def start(self):
    """
    Begins displaying the progress indicator.
    """
    self._filled = 0
    print(' [' + 'simulation progress'.center(self._text_width - 8) + ']     ')
    print(' [', end='', flush=True)
    
  def update(self, step : int):
    """
    Updates the progress indicator to reflect the amount of completed steps
    (expected to grow monotonically).
    """
    x = int(round((self._text_width - 8) * step / self._total_steps))
    if x - self._filled > 0:
      print('-' * (x - self._filled), end='', flush=True)
      self._filled = x

  def stop(self):
    """
    Completes the progress indicator.
    """
    self.update(self._total_steps)
    print('] done',flush=True)


import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

class GrayscaleGraphics(Batch):
  """
  Besides offering the same functionality of Batch, this class visualises
  the simulated world using colours to represent animals and grass level.
  The class constructor takes the total number of steps, the list of patches
  in the simulation (a 1D list), the width and height of the grid of patches 
  (so one patch for every pair 0 <= x < width and 0 <= y < height).
  The constructor has also three optional arguments: the first is a time delay 
  in seconds added to each call to the update method (minimum is 0.05s, default 
  is 0.1s), the second is a boolean flag specifying whether to render the 
  amount of grass in each patch, the last one is the same optional argument of 
  Batch.

  ColourGraphic(total_steps, patches, width, height, delay = 0.1, grass_levels = False, text_width = 60)
  """

  __slots__ = [
    "_width",
    "_height",
    "_plt_grid",
    "_patches",
    "_grass",
    "_fig",
    "_wax",
    "_wim",
    "_delay"
  ]

  def __init__(self, total_steps : int, 
               patches : typing.List[entities.Patch],
               width : int, height : int,
               delay : float = 0.1,
               grass_levels : bool = False,
               text_width : int = 60):
    super().__init__(total_steps, text_width)

    self._width = width
    self._height = height
    self._plt_grid = np.zeros((self._height,self._width))
    self._patches = patches
    self._grass = grass_levels
    self._update_grid()
    self._delay = max(delay,0.05)

  def _update_grid(self):    
    grid = self._plt_grid
    for patch in self._patches:
      x,y = patch.coordinates()
      if patch.has_alive_fox() or patch.has_alive_rabbit():
        grid[y,x] = 1.2
      elif self._grass:
        grid[y,x] = (patch.grass() / entities.Patch.max_grass_amount) * 0.7
      else:
        grid[y,x] = 0

  def start(self):
    """
    Begins displaying the progress indicator and opens the simulation window.
    """
    super().start()
    fig, wax = plt.subplots()
    fig.is_open = True
    def _on_close(event):
      event.canvas.figure.is_open = False
    fig.canvas.mpl_connect('close_event', _on_close)
    fig.canvas.manager.set_window_title('Foxes and rabbits')
    self._fig = fig
    wax.axes.xaxis.set_ticks(np.arange(0,self._width,5))
    wax.axes.xaxis.set_ticks(range(self._width), minor=True)
    wax.axes.yaxis.set_ticks(np.arange(0,self._height,5))
    wax.axes.yaxis.set_ticks(range(self._height), minor=True)
    wax.grid(which='both', alpha=0.2)
    self._wax = wax
    self._wim = wax.imshow(self._plt_grid, 
                           interpolation='nearest', 
                           cmap='gray_r', 
                           vmin = 0, vmax=1.5)

  def update(self, step : int): 
    """
    Updates the simulation window and the progress indicator (see Batch.update).
    """
    ts = time.perf_counter()
    super().update(step)
    if self._fig.is_open:
      self._update_grid()
      self._wim.set_data(self._plt_grid)
      wax = self._wax
      wax.texts.clear()
      for patch in self._patches:
        x,y = patch.coordinates()
        af = patch.has_alive_fox()
        ar = patch.has_alive_rabbit()
        if af and ar:
          wax.text(x,y, "F/R", ha="center", va="center", color="w")
        elif af:
          wax.text(x,y, "F", ha="center", va="center", color="w")
        elif ar:
          wax.text(x,y, "R", ha="center", va="center", color="w")
      plt.draw()
      te = time.perf_counter()
      pause = max(0.05, self._delay - (te - ts))
      plt.pause(pause)

  def stop(self):
    """
    Closes the simulation window and completes the progress indicator.
    """
    super().stop()
    if self._fig.is_open:
      plt.close(self._fig)

class ColourGraphics(Batch):
  """
  Besides offering the same functionality of Batch, this class visualises
  the simulated world using colours to represent animals and grass level.
  The class constructor takes the total number of steps, the list of patches
  in the simulation (a 1D list), the width and height of the grid of patches
  (so one patch for every pair 0 <= x < width and 0 <= y < height).
  The constructor has also three optional arguments: the first is a time delay 
  in seconds added to each call to the update method (minimum is 0.05s, default 
  is 0.1s), the second is a boolean flag specifying whether to render the 
  amount of grass in each patch, the last one is the same optional argument of 
  Batch.

  ColourGraphic(total_steps, patches, width, height, delay = 0.1, grass_levels = False, text_width = 60)
  """

  __slots__ = [
    "_width",
    "_height",
    "_plt_grid",
    "_patches",
    "_grass",
    "_fig",
    "_wax",
    "_wim",
    "_delay"
  ]

  def __init__(self, total_steps : int, 
               patches : typing.List[entities.Patch],
               width : int, height : int,
               delay : float = 0.1,
               grass_levels : bool = False,
               text_width : int = 60):
    super().__init__(total_steps, text_width)

    self._width = width
    self._height = height
    self._plt_grid = np.zeros((self._height * 2, self._width * 2))
    self._patches = patches
    self._grass = grass_levels
    self._update_grid()
    self._delay = max(delay,0.05)

  def _update_grid(self):    
    grid = self._plt_grid
    for patch in self._patches:
      x,y = patch.coordinates()
      x *= 2
      y *= 2
      af = patch.has_alive_fox()
      ar = patch.has_alive_rabbit()
      gr = patch.grass() / entities.Patch.max_grass_amount if self._grass else 0
      if af and ar:
        grid[y  ,x  ] = 2 
        grid[y+1,x+1] = 2
        grid[y  ,x+1] = 3
        grid[y+1,x  ] = 3
      elif af:
        grid[y  ,x  ] = 2 
        grid[y+1,x+1] = 2
        grid[y  ,x+1] = 2
        grid[y+1,x  ] = 2
      elif ar:
        grid[y  ,x  ] = 3 
        grid[y+1,x+1] = 3
        grid[y  ,x+1] = 3
        grid[y+1,x  ] = 3
      else:
        grid[y  ,x  ] = gr 
        grid[y+1,x+1] = gr
        grid[y  ,x+1] = gr
        grid[y+1,x  ] = gr


  def start(self):
    """
    Begins displaying the progress indicator and opens the simulation window.
    """
    super().start()
    fig, wax = plt.subplots()
    fig.is_open = True
    def _on_close(event):
      event.canvas.figure.is_open = False
    fig.canvas.mpl_connect('close_event', _on_close)
    fig.canvas.manager.set_window_title('Foxes and rabbits')
    self._fig = fig
    wax.axes.xaxis.set_ticks(np.arange(0.5,self._width*2,10))
    wax.axes.xaxis.set_ticklabels(np.arange(0,self._width,5))
    wax.axes.xaxis.set_ticks(np.arange(0.5,self._width*2,2), minor=True)
    wax.axes.yaxis.set_ticks(np.arange(0.5,self._height*2,10))
    wax.axes.yaxis.set_ticklabels(np.arange(0,self._height,5))
    wax.axes.yaxis.set_ticks(np.arange(0.5,self._height*2,2), minor=True)
    wax.grid(which='both', alpha=0.2)
    wax.set_aspect("equal")
    self._wax = wax
    cmap = mpl.colors.ListedColormap(['limegreen','forestgreen','green','darkgreen', 'darkorange', 'dimgrey'])
    bounds = [0, 0.02, 0.3, 0.6, 1.1, 2.5, 3.5]
    norm = mpl.colors.BoundaryNorm(bounds, cmap.N)
    self._wim = wax.imshow(self._plt_grid, interpolation='none', cmap=cmap, norm=norm,)

  def update(self, step : int): 
    """
    Updates the simulation window and the progress indicator (see Batch.update).
    """
    ts = time.perf_counter()
    super().update(step)
    if self._fig.is_open:
      self._update_grid()
      self._wim.set_data(self._plt_grid)
      plt.draw()
      te = time.perf_counter()
      pause = max(0.05, self._delay - (te - ts))
      plt.pause(pause)

  def stop(self):
    """
    Closes the simulation window and completes the progress indicator.
    """
    super().stop()
    if self._fig.is_open:
      plt.close(self._fig)
'),'<string>','exec'))